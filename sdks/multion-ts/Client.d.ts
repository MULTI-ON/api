/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "./environments";
import * as core from "./core";
import * as MultionApi from "./api";
import { LowLevel } from "./api/resources/lowLevel/client/Client";
export declare namespace MultionApiClient {
    interface Options {
        environment?: core.Supplier<environments.MultionApiEnvironment | string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class MultionApiClient {
    protected readonly _options: MultionApiClient.Options;
    constructor(_options: MultionApiClient.Options);
    /**
     * Browse the web using MultiOn.
     * @throws {@link MultionApi.UnprocessableEntityError}
     *
     * @example
     *     await multionApi.browse({
     *         url: "url"
     *     })
     */
    browse(request: MultionApi.BrowseInput, requestOptions?: MultionApiClient.RequestOptions): Promise<MultionApi.BrowseOutput>;
    /**
     * This function is used to retrieve information from a website based on user query.
     * @throws {@link MultionApi.UnprocessableEntityError}
     *
     * @example
     *     await multionApi.retrieve("session_id", {
     *         url: "url"
     *     })
     */
    retrieve(sessionId: string, request: MultionApi.Message, requestOptions?: MultionApiClient.RequestOptions): Promise<MultionApi.RetrieveOutput>;
    protected _lowLevel: LowLevel | undefined;
    get lowLevel(): LowLevel;
}
