# Generated by CodiumAI
from multion.multion import _Multion
import webbrowser


# Dependencies:
# pip install pytest-mock
import pytest


class TestLogin:
    # Login with valid token.
    def test_valid_token_login(self, mocker):
        # Initialize the class object
        multion = _Multion()

        # Mock the verify_user method to return True
        mocker.patch.object(multion, "verify_user", return_value=True)

        # Call the login method
        multion.login()

        # Assert that the print statement is called with the correct message
        assert mocker.call("Logged in.") in mocker.mock_calls

    # Login with valid API key.
    def test_valid_api_key_login(self, mocker):
        # Initialize the class object
        multion = _Multion()

        # Mock the verify_user method to return False
        mocker.patch.object(multion, "verify_user", return_value=False)

        # Mock the issue_api_key method
        mocker.patch.object(multion, "issue_api_key")

        # Call the login method
        multion.login(use_api=True)

        # Assert that the issue_api_key method is called
        assert multion.issue_api_key.called

    # Login with valid API key and token.
    def test_valid_api_key_and_token_login(self, mocker):
        # Initialize the class object
        multion = _Multion()

        # Mock the verify_user method to return True
        mocker.patch.object(multion, "verify_user", return_value=True)

        # Call the login method with use_api=True and a valid multion_api_key
        multion.login(use_api=True, multion_api_key="valid_api_key")

        # Assert that the print statement is called with the correct message
        assert mocker.call("Logged in using API key.") in mocker.mock_calls

    # Login with invalid token.
    def test_invalid_token_login(self, mocker):
        # Initialize the class object
        multion = _Multion()

        # Mock the verify_user method to return False
        mocker.patch.object(multion, "verify_user", return_value=False)

        # Mock the register_client method
        mocker.patch.object(multion, "register_client")

        # Mock the get_auth_url method
        mocker.patch.object(multion, "get_auth_url")

        # Mock the webbrowser.open method
        mocker.patch.object(webbrowser, "open")

        # Mock the get_token method
        mocker.patch.object(multion, "get_token", return_value=None)

        # Call the login method
        multion.login()

        # Assert that the register_client method is called
        assert multion.register_client.called

        # Assert that the get_auth_url method is called
        assert multion.get_auth_url.called

        # Assert that the webbrowser.open method is called
        assert webbrowser.open.called

    # Login with invalid API key.
    def test_invalid_api_key_login(self, mocker):
        # Initialize the class object
        multion = _Multion()

        # Mock the verify_user method to return False
        mocker.patch.object(multion, "verify_user", return_value=False)

        # Mock the issue_api_key method
        mocker.patch.object(multion, "issue_api_key")

        # Call the login method
        multion.login()

        # Assert that the issue_api_key method is called
        assert multion.issue_api_key.called

    # Login with invalid API key and token.
    def test_invalid_api_key_and_token_login(self, mocker):
        # Initialize the class object
        multion = _Multion()

        # Mock the verify_user method to return False
        mocker.patch.object(multion, "verify_user", return_value=False)

        # Mock the register_client method
        mocker.patch.object(multion, "register_client")

        # Mock the get_auth_url method
        mocker.patch.object(multion, "get_auth_url")

        # Mock the webbrowser.open method
        mocker.patch.object(webbrowser, "open")

        # Mock the get_token method
        mocker.patch.object(multion, "get_token", return_value=None)

        # Call the login method with a valid multion_api_key
        multion.login(multion_api_key="valid_api_key")

        # Assert that the register_client method is called
        assert multion.register_client.called

        # Assert that the get_auth_url method is called
        assert multion.get_auth_url.called

        # Assert
